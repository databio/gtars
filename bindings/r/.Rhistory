setwd('/Users/sam/Documents/Work/gtars/bindings/r')
rextendr::document()
rextendr::document()
gtars_create <- gtars::igd_create('/Users/sam/Documents/Work/episcope/.test/igd/', '/Users/sam/Documents/Work/episcope/.test/bed_db')
gtars_create <- gtars::r_igd_create('/Users/sam/Documents/Work/episcope/.test/igd/', '/Users/sam/Documents/Work/episcope/.test/bed_db')
gtars_count <- gtars::r_igd_search(database_path = '/Users/sam/Documents/Work/episcope/.test/igd/igd_database.igd', query_path = '/Users/sam/Documents/Work/episcope/.test/set_A.bed')
gtars_create <- gtars::r_igd_create('/Users/sam/Documents/Work/episcope/.test/igd/', '/Users/sam/Documents/Work/episcope/.test/bed_db')
gtars_count <- gtars::r_igd_search(database_path = '/Users/sam/Documents/Work/episcope/.test/igd/igd_database.igd', query_path = '/Users/sam/Documents/Work/episcope/.test/set_A.bed')
gtars_create <- gtars::r_igd_create('/Users/sam/Documents/Work/episcope/.test/igd/', '/Users/sam/Documents/Work/episcope/.test/bed_db')
gtars_count <- gtars::r_igd_search(database_path = '/Users/sam/Documents/Work/episcope/.test/igd/igd_database.igd', query_path = '/Users/sam/Documents/Work/episcope/.test/set_A.bed')
View(gtars_count)
userSets_beds <- c('/Users/sam/Documents/Work/episcope/.test/set_A.bed', '/Users/sam/Documents/Work/episcope/.test/set_AA.bed')
db_path <- '/Users/sam/Documents/Work/episcope/.test/igd/igd_database.igd'
geneSetDatabaseOverlap =
lapplyAlias(userSets_beds, gtars::r_igd_search, db_path)
lapplyAlias = function(..., mc.preschedule=TRUE) {
if (is.null(getOption("mc.cores"))) { setLapplyAlias(1) }
if(getOption("mc.cores") > 1) {
return(parallel::mclapply(..., mc.preschedule=mc.preschedule))
} else {
return(lapply(...))
}
}
geneSetDatabaseOverlap =
lapplyAlias(userSets_beds, gtars::r_igd_search, db_path)
setLapplyAlias = function(cores=0) {
if (cores < 1) {
return(getOption("mc.cores"))
}
if(cores > 1) { #use multicore?
if (requireNamespace("parallel", quietly = TRUE)) {
options(mc.cores=cores)
} else {
warning("You don't have package parallel installed. Setting cores to 1.")
options(mc.cores=1) #reset cores option.
}
} else {
options(mc.cores=1) #reset cores option.
}
}
lapplyAlias = function(..., mc.preschedule=TRUE) {
if (is.null(getOption("mc.cores"))) { setLapplyAlias(1) }
if(getOption("mc.cores") > 1) {
return(parallel::mclapply(..., mc.preschedule=mc.preschedule))
} else {
return(lapply(...))
}
}
geneSetDatabaseOverlap =
lapplyAlias(userSets_beds, gtars::r_igd_search, db_path)
geneSetDatabaseOverlap =
lapply(userSets_beds, gtars::r_igd_search, db_path)
geneSetDatabaseOverlap =
mapply(gtars::r_igd_search, userSets_beds, db_path)
geneSetDatabaseOverlap =
mapply(gtars::r_igd_search, db_path, userSets_beds)
View(geneSetDatabaseOverlap)
geneSetDatabaseOverlap =
mapply(gtars::r_igd_search, db_path, userSets_beds, SIMPLIFY = FALSE)
geneSetDatabaseOverlap =
mapply(gtars::r_igd_search, db_path, userSets_beds, SIMPLIFY = FALSE)
View(geneSetDatabaseOverlap)
geneSetDatabaseOverlap =
mapply(gtars::r_igd_search, db_path, userSets_beds)
r_igd_search_rev <- function(query_path = query_path, database_path = database_path) {
gtars::r_igd_search(database_path = database_path, query_path = query_path)
}
geneSetDatabaseOverlap =
lapply(userSets_beds, r_igd_search_rev, db_path)
userSets_bed <- '/Users/sam/Documents/Work/episcope/.test/set_A.bed'
geneSetDatabaseOverlap =
lapply(userSets_bed, r_igd_search_rev, db_path)
geneSetDatabaseOverlaps =
lapply(userSets_beds, r_igd_search_rev, db_path)
View(geneSetDatabaseOverlap)
View(geneSetDatabaseOverlaps)
set_A <- GRanges(
seqnames = "chr1",
ranges = IRanges(
start = c(1, 4, 8, 12, 15, 20, 25),
end = c(3, 6, 10, 14, 17, 22, 27)
)
)
library(GenomicRanges)
set_A <- GRanges(
seqnames = "chr1",
ranges = IRanges(
start = c(1, 4, 8, 12, 15, 20, 25),
end = c(3, 6, 10, 14, 17, 22, 27)
)
)
set_B <- GRangesList(
group1 = GRanges(
seqnames = "chr1",
ranges = IRanges(
start = c(2, 7, 12, 16, 21),
end = c(4, 9, 15, 18, 23)
)
),
group2 = GRanges(
seqnames = "chr1",
ranges = IRanges(
start = c(5, 11, 16, 19, 24),
end = c(7, 13, 18, 21, 26)
)
),
group3 = GRanges(
seqnames = "chr1",
ranges = IRanges(
start = c(3, 8, 13, 17, 22),
end = c(5, 10, 15, 19, 24)
)
)
)
countOverlaps(set_A, set_B)
set_AA <- GRanges(
seqnames = "chr1",
ranges = IRanges(
start = c(2, 4, 8),
end = c(3, 6, 10)
)
)
sets <- c(set_A, set_AA)
lapply(sets, countOverlaps, set_B)
countOverlapsRev = function(query, subject, ...) {
return(countOverlaps(subject, query, ...))
}
lapply(sets, countOverlapsRev, set_B)
sets <- GRangesList(set_A, set_AA)
lapply(sets, countOverlapsRev, set_B)
View(geneSetDatabaseOverlaps)
print(geneSetDatabaseOverlaps)
lapply(geneSetDatabaseOverlaps, function(x) x$number_of_hits)
lapply(geneSetDatabaseOverlaps, function(x) x$`number of hits`)
lapply(geneSetDatabaseOverlaps, function(x) x[[`number of hits`]])
lapply(geneSetDatabaseOverlaps, function(x) x[[number of hits]])
lapply(geneSetDatabaseOverlaps, function(x) x[['number of hits']])
geneSetDatabaseOverlaps[[1]]
str(geneSetDatabaseOverlaps[[1]])
lapply(geneSetDatabaseOverlaps, function(x) x[" number of hits"])
countOverlaps(set_A, set_B)
lapply(geneSetDatabaseOverlaps, function(x) as.numeric(["number of hits"]))
lapply(geneSetDatabaseOverlaps, function(x) as.numeric(x["number of hits"]))
lapply(geneSetDatabaseOverlaps, function(x) (x["number of hits"]))
lapply(geneSetDatabaseOverlaps, function(x) as.numeric(x[" number of hits"]))
lapply(geneSetDatabaseOverlaps, function(x) as.numeric(x[" number of hits"]))
lapply(geneSetDatabaseOverlaps, function(x) as.numeric(as.character(x[[3]]))  # using position instead of name
lapply(geneSetDatabaseOverlaps, function(x) as.numeric(as.character(x[[3]])))
lapply(geneSetDatabaseOverlaps, function(x) as.numeric(as.character(x[[3]])))
lapply(geneSetDatabaseOverlaps, function(x) as.numeric(as.character(x[," number of hits"])))
export(set_A, '/Users/sam/Documents/Work/gtars/bindings/r/tests/set_A.bed', format="BED")
library(rtracklayer)
export(set_A, '/Users/sam/Documents/Work/gtars/bindings/r/tests/set_A.bed', format="BED")
export(set_AA, '/Users/sam/Documents/Work/gtars/bindings/r/tests/set_AA.bed', format="BED" )
